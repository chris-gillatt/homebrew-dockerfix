#!/bin/bash
# Dockerfix - an app to clean up your docker environment and restart the docker daemon for Mac
# Author: C Gillatt

# Output colour formatting based on OS Type
# TO DO - Properly support CentOS.
if [ "$OSTYPE" == "linux-gnu" ]; then
  red="\\e[31m"
  green="\\e[32m"
  yellow="\\e[33m"
  reset="\\e[0m"
elif [[ "$OSTYPE" == darwin* ]]; then
  red="\\033[31m"
  green="\\033[32m"
  yellow="\\033[33m"
  reset="\\033[0m"
else 
  red=""
  green=""
  yellow=""
  reset=""
fi 

# Formatted Output Prefixes
ok="  OK  "
info=" INFO "
warn=" WARN "

# Functions to allow tidy text formatting
# Colour Text
text_format_red () {
  echo -en "$red$1$reset"
} # End text_format_red

text_format_green () {
  echo -en "$green$1$reset"
} # End text_format_green

text_format_yellow () {
  echo -en "$yellow$1$reset"
} # End text_format_yellow

# Prefixes
text_format_ok () {
  echo -en "[$green$ok$reset] "
} # End text_format_ok

text_format_info () {
  echo -en "$green$info$reset "
} # End text_format_info

text_format_warn () {
  echo -en "$yellow$warn$reset "
} # End text_format_warn

# Help message
usage () { 

echo "Usage: dockerfix [OPTIONS]

Housekeeping for docker environments

Options:
    -h, --help                  Display this help message
    -a, --all                   Stop containers, prune containers, images & networks, restart
                                the docker daemon, then perform a docker version check
    -c, --container-prune       Remove all non-running docker containers
    -d, --docker-version-check  Check to see if there's a more up-to-date version of docker available
    -i, --image-prune           Remove all dangling docker images
    -n, --network-prune         Remove all docker networks
    -r, --restart-docker        Restart docker daemon
    -s, --system-prune          Perform docker system prune.  Essentially the same as -a, but
                                does not handle running containers or restart the docker daemon
    -t, --stop-containers       Stop all running containers
    -v, --version               Print dockerfix current version" 1>&2; }

# Convert --long options to -s(hort) ones as getops does not support long options.
for arg in "$@"; do
  shift
  case "$arg" in
    "--all")                  set -- "$@" "-a" ;;
    "--help")                 set -- "$@" "-h" ;;
    "--container-prune")      set -- "$@" "-c" ;;
    "--docker-version-check") set -- "$@" "-d" ;;
    "--image-prune")          set -- "$@" "-i" ;;
    "--network-prune")        set -- "$@" "-n" ;;
    "--restart-docker")       set -- "$@" "-r" ;;
    "--system-prune")         set -- "$@" "-s" ;;
    "--stop-containers")      set -- "$@" "-t" ;;
    "--version")              set -- "$@" "-v" ;;
    *)                        set -- "$@" "$arg"
  esac
done

stop_all_running_containers () {
  text_format_yellow "Stopping all running Docker containers" && echo 
  containers=$(docker ps --quiet)
  if [ -n "$containers" ]; then
    for container in $containers; do 
      docker stop "$container"
    done
  else
    text_format_green "> " && text_format_yellow "There are no running containers to stop" && echo 
  fi
} # End stop_all_containers

container_prune () {
  text_format_yellow "Removing all non-running docker containers" && echo 
  docker container prune --force
} # End container_prune

image_prune () {
  text_format_yellow "Removing all dangling docker images" && echo
  docker image prune --force
} # End image_prune

network_prune () {
  text_format_yellow "Removing all docker networks" && echo 
  docker network prune --force
} # End network_prune

system_prune () {
  text_format_yellow "Performing Docker System Prune" && echo 
  docker system prune --all --force
} # End system_prune

restart_docker_mac () {
  text_format_yellow "Restarting Docker Daemon - this may take a minute or two" && echo 
  killall Docker >/dev/null 2>&1 ; sleep 10 && open /Applications/Docker.app || exit 1
} # End restart_docker_mac

docker_daemon_health_check () {
  # Wait for docker to become responsive and show a simple progress bar using dots
  DOT="."
  until docker info >/dev/null 2>&1; do
    text_format_green "> " && text_format_yellow "Waiting for docker daemon to start up..${DOT}\r"
    DOT="${DOT}."
    sleep 0.1
  done
  echo
  text_format_ok && text_format_yellow "The Docker Daemon has now started" && echo
} # End docker_daemon_health_check

version_check () {
  version=$(brew info dockerfix | grep stable | awk '{print $3}')
  text_format_yellow "Dockerfix version $version"
} # End version_check

semver_comparison () {
  # Function to allow comparison of semantic versions
  test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1";
} # End semver_comparison

docker_version_check () {
  docker_local_version=$(docker info --format '{{ .ServerVersion }}')
  docker_remote_version=$(curl -s https://download.docker.com/mac/static/stable/x86_64/ | grep -o "docker-.*" | perl -pe 'if(($_)=/([0-9]+([.][0-9]+)+)/){$_.="\n"}' | sort -rV | head -1)
  text_format_yellow "Checking for docker updates.." && echo
  text_format_green "> " && text_format_yellow "Docker version $docker_remote_version is the latest stable version currently available" && echo 
  text_format_green "> " && text_format_yellow "Docker version $docker_local_version is currently installed" && echo
  if semver_comparison "$docker_remote_version" "$docker_local_version"; then
    text_format_info && text_format_yellow "A newer version of Docker is available: version $docker_remote_version" && echo
    text_format_info && text_format_yellow "Check https://download.docker.com/mac/static/stable/x86_64/" && echo
  else
    text_format_ok && text_format_yellow "Docker is up-to-date" && echo 
  fi
} # End docker_version_check

# If no arguments are provided, print help
if [ $# -eq 0 ]; then
  usage
  exit 0
fi

# Check to ensure docker is installed, otherwise there's no point in running dockerfix.
if [ ! -x "$(command -v docker)" ]; then
  text_format_warn && text_format_red "Docker not found.  Is it installed, executable and in your \$PATH?"
  exit 1
fi

# Provide parameter flags and reply accordingly
while getopts ":acdhinrstv" opt; do
  case ${opt} in
    a )
      stop_all_running_containers
      container_prune
      image_prune
      network_prune
      restart_docker_mac
      docker_daemon_health_check
      docker_version_check
      text_format_ok && text_format_yellow "Dockerfix --all complete."
      exit 0
      ;;
    c )
      container_prune
      ;;
    d )
      docker_version_check
      ;;
    h )
      usage
      exit 0
      ;;
    i )
      image_prune
      ;;  
    n )
      network_prune
      ;;
    r )
      restart_docker_mac
      docker_daemon_health_check
      ;;
    s )
      system_prune
      ;;
    t )
      stop_all_running_containers
      ;;
    v )
      version_check
      ;;
    \? )
      echo "Invalid Option: -$OPTARG" 1>&2
      usage
      exit 1
      ;;
  esac
done
shift $((OPTIND -1))
